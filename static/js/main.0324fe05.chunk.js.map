{"version":3,"sources":["components/form.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","value","handleChange","e","_this","setState","target","handleSubmit","preventDefault","props","handleGuess","react_default","a","createElement","className","onSubmit","this","type","onChange","autoFocus","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isLetterInWord","letter","word","toUpperCase","includes","indices","i","length","push","list","lettersFound","map","item","message","numGuessesRemaining","letters","concat","toConsumableArray","wrongLettersGuessed","console","log","match","displayImage","src","alt","allWords","Math","floor","random","form_Form","join","Boolean","window","location","hostname","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0324fe05.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport default class Form extends Component {\r\n\r\n\tstate = {\r\n\t\tvalue: \"\"\r\n\t}\r\n\r\n\thandleChange = (e) => {\r\n\t  \tthis.setState({\r\n\t  \t\tvalue: e.target.value\r\n\t  \t});\r\n\t  }\r\n\r\n\thandleSubmit = (e) => {\r\n\t    e.preventDefault();\r\n\r\n\t    \tthis.props.handleGuess(this.state.value);\r\n\t    \tthis.setState({\r\n\t    \t\tvalue: \"\"\r\n\t    \t});\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form className=\"input\" onSubmit={this.handleSubmit}>\r\n\t          <input type=\"text\" value={this.state.value} onChange={this.handleChange} autoFocus />\r\n\t          <button type=\"submit\">Guess!</button>\r\n\t        </form>\r\n        )\r\n\t}\r\n}","import React, {Component} from 'react';\nimport './App.css';\nimport Form from './components/form';\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    const allWords = [\"words\", \"pipe\", \"dearest\", \"deer\", \"fished\", \"car\"];\n    const word= allWords[Math.floor(Math.random()*allWords.length)];\n    var lettersFound = [];\n    for (var i=0; i<word.length;i++) {\n      lettersFound = [...lettersFound, \"_\"];\n    }\n\n    this.state = {\n      word: word,\n      numGuessesRemaining: 6,\n      wrongLettersGuessed: [],\n      lettersFound: lettersFound,\n      message: \"Guess a Letter:\"\n    }\n  }\n\n  isLetterInWord = (letter) => {\n    var word =this.state.word.toUpperCase();\n    if (word.includes(letter)) {\n\n      var indices = [];\n      for(let i=0; i<word.length;i++) {\n          if (word[i] === letter) indices.push(i);\n      }\n\n      var letters = this.state.lettersFound;\n\n      const list = letters.map((item, i) => {\n        if (indices.includes(i)) {\n          return letter;\n        } else {\n          return item;\n        }\n      });\n\n      this.setState({\n        lettersFound: list\n      });\n\n      if (!list.includes(\"_\")) {\n        this.setState({\n        message: <div className=\"message\">You've Won!</div>\n        });\n      }\n      else {\n        this.setState({\n        message: <div className=\"message\">You found {letter}!</div>\n        });\n      }\n    }\n\n    else {\n      this.setState ({\n        numGuessesRemaining: this.state.numGuessesRemaining - 1\n      });\n      if (this.state.numGuessesRemaining <= 0) {\n        var message = <div className=\"message\">No Guesses Left. You Lose!</div>\n      }\n      else {\n        var message = <div className=\"message\">{letter} is not in the word!</div>\n      }\n      let letters = [...this.state.wrongLettersGuessed, letter];\n      this.setState({\n        wrongLettersGuessed: letters,\n        message: message\n      });\n    }\n  }\n\n\n  handleGuess = (letter) => {\n    console.log(this.state.word);\n    letter = letter.toUpperCase();\n    var letters = this.state.lettersFound.concat(this.state.wrongLettersGuessed);\n    if (this.state.numGuessesRemaining <= 0) {\n      this.setState({\n        message: <div className=\"message\">No guesses left. You Lose!</div>\n      });\n    }\n    else if (letter.length !== 1 && !letter.match(/[A-Z|a-z]/i)) {\n      this.setState({\n        message: <div className=\"message\">Please enter a letter!</div>\n      });\n    }\n      \n    else if (letters.includes(letter)) {\n\n      this.setState({\n        message: <div className=\"message\">You have already guessed {letter}!</div>\n      });\n\n    }\n\n    else {\n      letter = letter.toUpperCase();\n      this.isLetterInWord(letter);\n\n    }\n  }\n\n  displayImage = (i) => {\n    switch(i) {\n      case 6: \n        return <img src=\"/images/sixGuesses.png\" alt=\"Six Guesses Remaining\" />\n      case 5: \n        return <img src=\"/images/fiveGuesses.png\" alt=\"Five Guesses Remaining\" />\n      case 4: \n        return <img src=\"/images/fourGuesses.png\" alt=\"Four Guesses Remaining\" />\n      case 3: \n        return <img src=\"/images/threeGuesses.png\" alt=\"Three Guesses Remaining\" />\n      case 2: \n        return <img src=\"/images/twoGuesses.png\" alt=\"Two Guesses Remaining\"/>\n      case 1: \n        return <img src=\"/images/oneGuesses.png\" alt=\"One Guess Remaining\"/>\n      case 0: \n        return <img src=\"/images/noGuesses.png\" alt=\"No Guesses Remaining\"/>\n      default: \n        return <img src=\"/images/noGuesses.png\" alt=\"No Guesses Remaining\" />\n\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        {this.state.message}\n        <Form handleGuess={this.handleGuess} word={this.state.word} />\n        <div className=\"word\">\n          <p>{this.state.lettersFound.join(\" \")}</p>\n        </div>\n        <div className =\"image\">{this.displayImage(this.state.numGuessesRemaining)}</div>\n        <div className=\"guessedLetters\">\n          <p>Wrong Guessed Letters:</p> \n          <p>{this.state.wrongLettersGuessed}</p>\n        </div>\n      </div>\n    );\n  }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}